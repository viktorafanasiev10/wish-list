rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /wishlists/{listId} {
      allow read, write: if request.auth != null; // dev only

      match /items/{itemId} {
        allow read, write: if request.auth != null; // dev only
      }
      
      match /reservations/{rid} {
        allow read: if isOwner(listId) || isGuest(listId);
        allow create: if isGuest(listId);
        allow update, delete: if isOwner(listId) || isSelfReservation(listId, rid);
      }
    }

    match /wishlistInvites/{inviteId} {
      allow create: if request.auth != null &&
        request.auth.uid == request.resource.data.ownerId;
      allow read, update: if request.auth != null &&
        (request.auth.uid == resource.data.ownerId ||
         request.auth.token.email == resource.data.email);
      allow delete: if request.auth != null &&
        request.auth.uid == resource.data.ownerId;
    }
  }
  
  function isOwner(listId) { return resource.data.ownerId == request.auth.uid; }
  function isGuest(listId) { return exists(/databases/$(database)/documents/wishlists/$(listId)/members/$(request.auth.uid)); }
  function isPublic(listId) { return get(/databases/$(database)/documents/wishlists/$(listId)).data.visibility == "public"; }
  function parentPerm(listId) { return isOwner(listId) || isGuest(listId) || isPublic(listId); }
  function isSelfReservation(listId, rid) {
    return get(/databases/$(database)/documents/wishlists/$(listId)/reservations/$(rid)).data.byUserIdHash == hmac(request.auth.uid);
  }
}
